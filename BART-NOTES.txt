----------------------------------
Head First Design Patterns - Notes X
----------------------------------

    Strategy
    Observer
    Decorator
    Factory, same as Factory Method?
    Singleton
    Command
    Null Object
    Adapter
    Facade

    Template Method
    Iterator
    Composite
    State
    Proxy


********
STRATEGY - behavioral
********
	My Words:
		Encapsulate behavior in a separate object, useable by many client objects. An implementation strategy,
		if you will, where the strategies conform to a single interface, allowing multiple like objects to
		compose their behavior and _change_ their behavior as needed, be that at runtime or otherwise.

	GOF: Define a family of algorithms, encapsulate each one in a separate class, and define each class with the 
	same interface so that they can be interchangeable. Strategy lets the algorithm vary independently from the 
	clients that use it, runtime or otherwise.

********
OBSERVER - behavioral
********
	My Words:
		Allow subscriber object(s) the ability to observe a subject by registering as an observer. Upon some 
		action or trigger, the subject notifies its subscribers. Normally the subject provides a way for 
		subscribers to unsubscribe as well.
		
	GOF:
		Define a one-to-many dependency between objects so that when one object changes state, all its 
		dependents are notified and updated automatically.

*********
DECORATOR - structural
*********
	My Words:
		Allows a component to be "wrapped" by other components implementing the same interface (or abstract 
		class), then delegating behavior to the composite objects as needed. A method(s) in question on the 
		wrapper (decorator) object will call to the component object it is wrapping (decorating), that one will
		call to the one it is decorating, and so forth in cascading fashion. In this manner, the Decorator 
		object is able to inherit the behavior of the decorated objects without having to be a subclass. This 
		allows for flexible behavior modification through composition, giving a nice runtime benefit as well.
	
	GOF:
		Attached *additional responsibilities* to an object dynamically. Decorators provide a flexible alternative
		to subclassing for extending functionality.

	Addl Notes:

    More Reading:
        HFDP (252) - adapter pattern vs decorator pattern

**************
FACTORY METHOD - creational
**************
	My Words:
		Encapsulate object creation in a single method of a creator class. The creator class may inherit from 
		an abstract class that provides generic behavior tied to the interface of the products that are being 
		created. The factory method knows the details of said products.
		
	GOF:
		Define an interface for creating an object, but let subclasses decide which class to instantiate. 
		Factory Method lets a class defer instantiation to subclasses.

	Addl Notes:	
		The Creator class is written without knowledge of the actual products that will be created, which is 
		decided purely by the choice of the subclass that is used. [HFDP 134]
		
		Relies on inheritance; object creation is delegated to subclasses which implement the factory method to create
		objects.

****************
ABSTRACT FACTORY - creational
****************
	My Words:
		Define an abstract factory that creates products, giving client code the ability to use a reference to a factory
		interface, while allowing us to define differing factory implementations that can produce variations of the
		factory	products.
		
		Client code may reside in a different environment or context, meaning the factory being used can vary along with
		the variation in context. This allows us to return different kinds of products suitable for the environment we
		are in without having to change underlying client code directly.
		
	GOF:
		Provides an interface for creating families of related or dependent objects without specifying their concrete
		classes.
		
	Addl Notes:
		It is important to remember that Abstract Factories are useful for creating _families of products_, whereas
		Factory Method is more useful when only creating a single object.
		Differing implementations for the Abstract Factories will create parallel sets of product families.
		
		Relies on object composition; object creation is implemented in methods exposed in the factory interface.

*********
SINGLETON - creational
*********
	My Words:
	    Class that exists as a single, self-managed instance. Provides a globally accessible reference to the single
	    instance, be that through a static accessor, global variable, what have you.

    GOF:
        Ensures a class has only one instance and provides a global point of access to it.

    Addl Notes:
        The singleton pattern could be a problem when using multiple classloaders. Because more than one version of the
        class exists, more than one instance could be allowed to exist as well. A possible solution would be to specify
        the classloader yourself [how?].

*******
COMMAND
*******
	My Words:
		Allows an invoker to execute commands without having to know the implementation details of said commands. Keeps
		caller and implementer decoupled. The command objects are themselves aware of their receiver, the object that
		the command operates against.

	HFDP:
		Encapsulates a request as an object, thereby letting you parameterize clients with different requests, queue or
		log requests, and support undoable operations.
		
	Addl Notes:
	    Seems similar to passing methods as args, though the Command objects very well might have state.

	When to Use:
		Queue implementation
		Undo
		Repeatability of operations at later time
		Ordered or structured execution of very different commands
		
	More Reading:
		HFDP (228-230)
		http://c2.com/cgi/wiki?CommandPattern

***********
NULL OBJECT
***********
	My Words:
		Used to show intent, meaning we understand that null is the current state, but we don't want to have to check
		for it. We want to treat null as an equally expected state to the other 'regular' states.
		
		An example of this is when we used the CommandNotImplemented command in the remote control example of the
		command pattern. Rather than performing null checks on invocation, ensuring we didn't try to call execute on a
		null command, we instead initialized the buttons with "Null Objects" in the form of CommandNotImplemented instances.
		
	HFDP (214):
		A "Null Object" is useful when you don't have a meaninfgul object to return, and yet you want to remove the
		responsibility for handling null from the client. For instance, in our remote control, we didn't have a
		meaningful object to assign to each slot out of the box, so we provided a NoCommand object that acts as a
		surrogate and does nothing when its execute method is called.

*******
ADAPTER
*******
	My Words:

    HFDP:
        Alter an interface so that it matches one a client is expecting.

    More Reading:
        HFDP (252) - adapter pattern vs decorator pattern
        HFDP (260) - adapter pattern vs facade pattern

******
FACADE
******
	My Words:

    HFDP:
        Provide a simplified interface to a subsytem.

    More Reading:
        HFDP (260) - adapter pattern vs facade pattern

---------------------
* DESIGN PRINCIPLES *
---------------------

******************
Design Principle x
******************

	Identify the aspects of your application that vary and separate them from what stays the same. Ie, take what 
	varies and encapsulate it so that it won't affect the rest of your code.

	Separate pieces that change often (requirements change) from those that don't. Encapsulate the the parts that 
	vary so that that we clater we can alter or extend the parts that vary without affecting those that don't. 
	This forms the basis for every design pattern. All patterns provide a way to let some part of a a system vary 
	independently of all other parts.

*********************
Open-Closed Principle [86]
*********************
	Classes should be open for extension, but closed for modification.
		
	Extend classes to add new behavior as new requirements arrive.
	Do not modify a classes implementation if possible. By keeping things closes, we reduce regression risk.
		
	Designs should be resilient to change and flexible enough to take on new functionality to meet changing
	requirements.
		
******************************
Dependency Inversion Principle [139]
******************************
	Depend upon abstractions. Do not depend upon concrete classes.
	
	Similar to "program to an interface, not an implementation", but is a stronger statement to indicate that even
	high level components using low level components should not depend on those low level components. Even those
	high level components should depend on abstractions.
	
****************************
Principle of Least Knowledge [265]
****************************
    Talk only to your immediate friends.

    Keep the amount of classes that your classes interact with to a minimum. Reduce coupling. The less interaction with
    other classes, the lower the risk of maintenance issues resulting from changes to collaborators. For example, we
    don't want to call:

        getCar().getEngine().putGasIn(jugOfGasoline)

    That exposes an implementation detail about the Car object, the Engine. Maybe that Engine interface changes down the
    road and the engine doesn't take gas anymore. Maybe we need to convert the gas to electric before we fuel the engine
    rather than adding the gas directly. If we let the Car object handle it itself, then we only need to change the way
    the engine is interacted with in one place, in the Car implementation. We should interact with the Car object directly
    and let _it_ be the one to handle details about Engine interaction.

        getCar.addFuel(jugOfGasoline);




----------------
* Random Notes *
----------------

DUCK class [9]

Ducks can fly(), quack(), and be display()ed.
Not all ducks can fly (rubber ducky). Not all ducks can quack (wooden duck). This is behavior that varies across ducks 
and therefore has no place in a superclass (BaseDuck or some such), even though inheritance feels so natural at first.

Alternative to having the fly() method in the superclass is to declare a Flyable interface that only ducks that fly 
implement.

Problem: Interfaces have no implementation. Fly() would have to be implemented in all implementing subclasses.